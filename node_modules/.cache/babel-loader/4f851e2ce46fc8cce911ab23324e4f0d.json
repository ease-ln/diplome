{"ast":null,"code":"import _objectSpread from \"/Users/drenyasova/diplome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/drenyasova/diplome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n  var _result$splice = result.splice(startIndex, 1),\n    _result$splice2 = _slicedToArray(_result$splice, 1),\n    removed = _result$splice2[0];\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nvar move = function move(source, destination, droppableSource, droppableDestination) {\n  var sourceClone = Array.from(source);\n  var destClone = Array.from(destination);\n  var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n    _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n    removed = _sourceClone$splice2[0];\n  destClone.splice(droppableDestination.index, 0, removed);\n  var result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\nvar grid = 24;\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    minWidth: \"15vw\",\n    textAlign: 'center',\n    padding: grid * 2,\n    margin: \"1.5em \".concat(grid, \"px 0 0\"),\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : '#F0F3F5'\n  }, draggableStyle);\n};\nvar getListStyle = function getListStyle(isDraggingOver, isEmpty) {\n  return {\n    // border: '1px solid lightgrey',\n    maxWidth: \"100vw\",\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: grid,\n    overflow: 'auto',\n    minHeight: isEmpty ? '45px' : 'NaN'\n  };\n};\nexport { getListStyle, getItemStyle, grid, move, reorder };","map":{"version":3,"names":["reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","_result$splice2","_slicedToArray","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","_sourceClone$splice2","droppableId","grid","getItemStyle","isDragging","draggableStyle","_objectSpread","userSelect","minWidth","textAlign","padding","margin","concat","boxShadow","background","getListStyle","isDraggingOver","isEmpty","maxWidth","display","flexWrap","overflow","minHeight"],"sources":["/Users/drenyasova/diplome/src/views/GQMConfig/utils.js"],"sourcesContent":["const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n\n  return result\n}\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source)\n  const destClone = Array.from(destination)\n  const [removed] = sourceClone.splice(droppableSource.index, 1)\n\n  destClone.splice(droppableDestination.index, 0, removed)\n\n  const result = {}\n  result[droppableSource.droppableId] = sourceClone\n  result[droppableDestination.droppableId] = destClone\n  return result\n}\n\nconst grid = 24\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  minWidth: `15vw`,\n  textAlign: 'center',\n  padding: grid * 2,\n  margin: `1.5em ${grid}px 0 0`,\n  boxShadow: `0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : '#F0F3F5',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n})\n\nconst getListStyle = (isDraggingOver, isEmpty) => ({\n  // border: '1px solid lightgrey',\n  maxWidth: `100vw`,\n  display: 'flex',\n  flexWrap: 'wrap',\n  padding: grid,\n  overflow: 'auto',\n  minHeight: isEmpty ? '45px' : 'NaN',\n})\n\nexport { getListStyle, getItemStyle, grid, move, reorder }\n"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAOA,CAAIC,IAAI,EAAEC,UAAU,EAAEC,QAAQ,EAAK;EAC9C,IAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;EAAA,IAAAM,cAAA,GACbH,MAAM,CAACI,MAAM,CAACN,UAAU,EAAE,CAAC,CAAC;IAAAO,eAAA,GAAAC,cAAA,CAAAH,cAAA;IAAvCI,OAAO,GAAAF,eAAA;EACdL,MAAM,CAACI,MAAM,CAACL,QAAQ,EAAE,CAAC,EAAEQ,OAAO,CAAC;EAEnC,OAAOP,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,IAAMQ,IAAI,GAAG,SAAPA,IAAIA,CAAIC,MAAM,EAAEC,WAAW,EAAEC,eAAe,EAAEC,oBAAoB,EAAK;EAC3E,IAAMC,WAAW,GAAGZ,KAAK,CAACC,IAAI,CAACO,MAAM,CAAC;EACtC,IAAMK,SAAS,GAAGb,KAAK,CAACC,IAAI,CAACQ,WAAW,CAAC;EAAA,IAAAK,mBAAA,GACvBF,WAAW,CAACT,MAAM,CAACO,eAAe,CAACK,KAAK,EAAE,CAAC,CAAC;IAAAC,oBAAA,GAAAX,cAAA,CAAAS,mBAAA;IAAvDR,OAAO,GAAAU,oBAAA;EAEdH,SAAS,CAACV,MAAM,CAACQ,oBAAoB,CAACI,KAAK,EAAE,CAAC,EAAET,OAAO,CAAC;EAExD,IAAMP,MAAM,GAAG,CAAC,CAAC;EACjBA,MAAM,CAACW,eAAe,CAACO,WAAW,CAAC,GAAGL,WAAW;EACjDb,MAAM,CAACY,oBAAoB,CAACM,WAAW,CAAC,GAAGJ,SAAS;EACpD,OAAOd,MAAM;AACf,CAAC;AAED,IAAMmB,IAAI,GAAG,EAAE;AAEf,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,UAAU,EAAEC,cAAc;EAAA,OAAAC,aAAA;IAC9C;IACAC,UAAU,EAAE,MAAM;IAClBC,QAAQ,QAAQ;IAChBC,SAAS,EAAE,QAAQ;IACnBC,OAAO,EAAER,IAAI,GAAG,CAAC;IACjBS,MAAM,WAAAC,MAAA,CAAWV,IAAI,WAAQ;IAC7BW,SAAS,0DAA0D;IAEnE;IACAC,UAAU,EAAEV,UAAU,GAAG,YAAY,GAAG;EAAS,GAG9CC,cAAc;AAAA,CACjB;AAEF,IAAMU,YAAY,GAAG,SAAfA,YAAYA,CAAIC,cAAc,EAAEC,OAAO;EAAA,OAAM;IACjD;IACAC,QAAQ,SAAS;IACjBC,OAAO,EAAE,MAAM;IACfC,QAAQ,EAAE,MAAM;IAChBV,OAAO,EAAER,IAAI;IACbmB,QAAQ,EAAE,MAAM;IAChBC,SAAS,EAAEL,OAAO,GAAG,MAAM,GAAG;EAChC,CAAC;AAAA,CAAC;AAEF,SAASF,YAAY,EAAEZ,YAAY,EAAED,IAAI,EAAEX,IAAI,EAAEZ,OAAO"},"metadata":{},"sourceType":"module"}