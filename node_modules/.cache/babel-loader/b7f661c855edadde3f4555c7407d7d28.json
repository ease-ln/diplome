{"ast":null,"code":"import { appConfig } from \"../config/config\";\nimport { config } from \"../services/config\";\nimport { actions as authActions } from \"./auth/actions\";\nimport { actions as activityActions } from \"./report/actions\";\nimport { actions as usersActions } from \"./users/actions.js\";\nimport { actions as agentActions } from \"./agents/actions\";\nimport { actions as projectActions } from \"./projects/actions\";\nimport { actions as roleActions } from \"./roles/actions\";\nimport { actionCreator as report } from \"./report/action-creators.js\";\nimport { actionCreator as usersActionCreator } from \"./users/action-creator.js\";\nimport { actionCreator as project } from \"./projects/action-creators\";\nimport { actionCreator as role } from \"./roles/action-creator\";\nimport jwtDecode from \"jwt-decode\";\nexport var localStorageKey = \"\".concat(config.URL, \"-\").concat(appConfig.localStorageItem, \":\").concat(config.PORT_NUMBER);\nexport var saveData = function saveData(key, data) {\n  return localStorage.setItem(localStorageKey, JSON.stringify(data));\n};\nexport var getData = function getData(key) {\n  return JSON.parse(localStorage.getItem(key));\n};\nexport var removeData = function removeData(key) {\n  return localStorage.removeItem(key);\n};\nexport function parseDate(date) {\n  var dd = String(date.getDate()).padStart(2, \"0\");\n  var mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  var yyyy = String(date.getFullYear());\n  return \"\".concat(dd, \"/\").concat(mm, \"/\").concat(yyyy);\n}\nexport var checkForSavedData = function checkForSavedData(store, history) {\n  // fetch charts & user data\n  var savedData = getData(localStorageKey);\n  var activitiesData = localStorage.getItem(\"activityReport\");\n  var timeData = localStorage.getItem(\"timeReport\");\n  var cumulData = sessionStorage.getItem(\"cumulativeReport\");\n  var loggedInEmail = localStorage.getItem(\"innometrics-email\");\n  var users = localStorage.getItem(\"users\");\n  if (savedData && savedData.token && jwtDecode(savedData.token).exp < Date.now() / 1000) {\n    // token expired, relogin\n    history.push(\"/login\");\n  } else if (savedData && savedData.token && loggedInEmail && loggedInEmail.length > 0) {\n    store.dispatch(authActions.loginSuccess(savedData));\n\n    // Bring activity chart data to redux store\n    if (activitiesData) {\n      var parsedActDate = JSON.parse(activitiesData);\n      store.dispatch(activityActions.fetchActions({\n        report: parsedActDate\n      }));\n    } else {\n      store.dispatch(report.fetchActivityReport(savedData.token));\n    }\n\n    // Bring cumulative chart data to redux store\n    if (cumulData) {\n      var parsedCumulData = JSON.parse(cumulData);\n      store.dispatch(activityActions.fetchCumulReport({\n        activityReports: parsedCumulData\n      }));\n    } else {\n      store.dispatch(report.fetchCumulReport(savedData.token, loggedInEmail));\n    }\n\n    // Bring time chart data to redux store\n    if (timeData) {\n      var parsedTime = JSON.parse(timeData);\n      store.dispatch(activityActions.fetchTimeReport({\n        report: parsedTime\n      }));\n    } else {\n      store.dispatch(report.fetchTimeReport(savedData.token));\n    }\n\n    // Bring users data to redux store\n    if (users) {\n      var parsedUsers = JSON.parse(users);\n      store.dispatch(usersActions.fetchUsers({\n        userList: parsedUsers\n      }));\n    } else {\n      store.dispatch(usersActionCreator.fetchUsers(saveData.token));\n    }\n\n    // Bring projects and agents to redux store\n    var projects = localStorage.getItem(\"projects\");\n    var agents = localStorage.getItem(\"agents\");\n    if (projects && agents) {\n      var parsedProjects = JSON.parse(projects);\n      var parsedAgents = JSON.parse(agents);\n      store.dispatch(projectActions.fetchProjects({\n        projectList: parsedProjects\n      }));\n      store.dispatch(agentActions.fetchAgents({\n        agentList: parsedAgents\n      }));\n    } else if (savedData && savedData.token) {\n      store.dispatch(project.fetchProjects(savedData.token, loggedInEmail));\n    }\n    var permissions = localStorage.getItem(\"innometrics-permissions\");\n    if (permissions) {\n      var parsedPermissions = JSON.parse(permissions);\n      store.dispatch(roleActions.fetchPermissions(parsedPermissions));\n    } else {\n      store.dispatch(role.fetchPermissions(savedData.token, JSON.parse(loggedInEmail)));\n    }\n  }\n};","map":{"version":3,"names":["appConfig","config","actions","authActions","activityActions","usersActions","agentActions","projectActions","roleActions","actionCreator","report","usersActionCreator","project","role","jwtDecode","localStorageKey","concat","URL","localStorageItem","PORT_NUMBER","saveData","key","data","localStorage","setItem","JSON","stringify","getData","parse","getItem","removeData","removeItem","parseDate","date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","checkForSavedData","store","history","savedData","activitiesData","timeData","cumulData","sessionStorage","loggedInEmail","users","token","exp","Date","now","push","length","dispatch","loginSuccess","parsedActDate","fetchActions","fetchActivityReport","parsedCumulData","fetchCumulReport","activityReports","parsedTime","fetchTimeReport","parsedUsers","fetchUsers","userList","projects","agents","parsedProjects","parsedAgents","fetchProjects","projectList","fetchAgents","agentList","permissions","parsedPermissions","fetchPermissions"],"sources":["/Users/drenyasova/diplome/src/redux/utils.js"],"sourcesContent":["import { appConfig } from \"../config/config\";\nimport { config } from \"../services/config\";\n\nimport { actions as authActions } from \"./auth/actions\";\nimport { actions as activityActions } from \"./report/actions\";\nimport { actions as usersActions } from \"./users/actions.js\";\nimport { actions as agentActions } from \"./agents/actions\";\nimport { actions as projectActions } from \"./projects/actions\";\nimport { actions as roleActions } from \"./roles/actions\";\n\nimport { actionCreator as report } from \"./report/action-creators.js\";\nimport { actionCreator as usersActionCreator } from \"./users/action-creator.js\";\nimport { actionCreator as project } from \"./projects/action-creators\";\nimport { actionCreator as role } from \"./roles/action-creator\";\n\nimport jwtDecode from \"jwt-decode\";\n\nexport const localStorageKey = `${config.URL}-${appConfig.localStorageItem}:${config.PORT_NUMBER}`;\n\nexport const saveData = (key, data) =>\n  localStorage.setItem(localStorageKey, JSON.stringify(data));\nexport const getData = (key) => JSON.parse(localStorage.getItem(key));\nexport const removeData = (key) => localStorage.removeItem(key);\n\nexport function parseDate(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = String(date.getFullYear());\n  return `${dd}/${mm}/${yyyy}`;\n}\n\nexport const checkForSavedData = (store, history) => {\n  // fetch charts & user data\n  const savedData = getData(localStorageKey);\n\n  const activitiesData = localStorage.getItem(\"activityReport\");\n  const timeData = localStorage.getItem(\"timeReport\");\n  const cumulData = sessionStorage.getItem(\"cumulativeReport\");\n  const loggedInEmail = localStorage.getItem(\"innometrics-email\");\n  const users = localStorage.getItem(\"users\");\n\n  if (\n    savedData &&\n    savedData.token &&\n    jwtDecode(savedData.token).exp < Date.now() / 1000\n  ) {\n    // token expired, relogin\n    history.push(\"/login\");\n  } else if (\n    savedData &&\n    savedData.token &&\n    loggedInEmail &&\n    loggedInEmail.length > 0\n  ) {\n    store.dispatch(authActions.loginSuccess(savedData));\n\n    // Bring activity chart data to redux store\n    if (activitiesData) {\n      const parsedActDate = JSON.parse(activitiesData);\n      store.dispatch(activityActions.fetchActions({ report: parsedActDate }));\n    } else {\n      store.dispatch(report.fetchActivityReport(savedData.token));\n    }\n\n    // Bring cumulative chart data to redux store\n    if (cumulData) {\n      const parsedCumulData = JSON.parse(cumulData);\n      store.dispatch(\n        activityActions.fetchCumulReport({\n          activityReports: parsedCumulData,\n        })\n      );\n    } else {\n      store.dispatch(report.fetchCumulReport(savedData.token, loggedInEmail));\n    }\n\n    // Bring time chart data to redux store\n    if (timeData) {\n      const parsedTime = JSON.parse(timeData);\n      store.dispatch(activityActions.fetchTimeReport({ report: parsedTime }));\n    } else {\n      store.dispatch(report.fetchTimeReport(savedData.token));\n    }\n\n    // Bring users data to redux store\n    if (users) {\n      const parsedUsers = JSON.parse(users);\n      store.dispatch(usersActions.fetchUsers({ userList: parsedUsers }));\n    } else {\n      store.dispatch(usersActionCreator.fetchUsers(saveData.token));\n    }\n\n    // Bring projects and agents to redux store\n    const projects = localStorage.getItem(\"projects\");\n    const agents = localStorage.getItem(\"agents\");\n\n    if (projects && agents) {\n      const parsedProjects = JSON.parse(projects);\n      const parsedAgents = JSON.parse(agents);\n\n      store.dispatch(\n        projectActions.fetchProjects({ projectList: parsedProjects })\n      );\n      store.dispatch(agentActions.fetchAgents({ agentList: parsedAgents }));\n    } else if (savedData && savedData.token) {\n      store.dispatch(project.fetchProjects(savedData.token, loggedInEmail));\n    }\n\n    const permissions = localStorage.getItem(\"innometrics-permissions\");\n    if (permissions) {\n      const parsedPermissions = JSON.parse(permissions);\n      store.dispatch(roleActions.fetchPermissions(parsedPermissions));\n    } else {\n      store.dispatch(\n        role.fetchPermissions(savedData.token, JSON.parse(loggedInEmail))\n      );\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}