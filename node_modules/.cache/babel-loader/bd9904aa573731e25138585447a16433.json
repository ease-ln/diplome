{"ast":null,"code":"import _slicedToArray from \"/Users/drenyasova/diplome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/drenyasova/diplome/src/views/NewDashboard/index.js\";\nimport React, { useLayoutEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n//GQM\nimport GQMWrapper from \"./GQM/GQMWrapper\";\nimport { GQMCardsToQuestions } from \"./GQMCardsConfig/index\";\nimport { getGoal,\n// getQuestions,\ngetQuestionById } from \"../GQMConfig/GQM/GQMHelper\";\nimport { ChooseProject, ChooseComponent } from \"./DropDowns/index.js\";\nimport \"./Dashboard.scss\";\nvar Dashboard = function Dashboard() {\n  var _useState = useState(\"You did not set up the GQM model, so you will see the default settings\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    goal = _useState2[0],\n    setGoal = _useState2[1];\n  var _useState3 = useState({\n      isactive: undefined,\n      projectID: undefined,\n      name: undefined\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    project = _useState4[0],\n    setProject = _useState4[1];\n  var _useState5 = useState({\n      isactive: undefined,\n      projectID: undefined,\n      name: undefined\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    SQProject = _useState6[0],\n    setSQProject = _useState6[1];\n  var users = useSelector(function (state) {\n    return state.users;\n  }).toJS().users;\n  var email = JSON.parse(localStorage.getItem(\"innometrics-email\"));\n  // const USER_TYPE = 'developer'\n\n  //get GQM questions and metrics for them\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    GQMConfigCards = _useState8[0],\n    setGQMConfigCards = _useState8[1];\n  useLayoutEffect(function () {\n    if (email) {\n      getGoal(localStorage.getItem('mr-token'), localStorage.getItem('user_id')).then(function (res) {\n        if (res && res.length !== 0) {\n          setGoal(res[0].content);\n          //create promises questionID X reqs\n          var reqArray = res[0].questions.map(function (item) {\n            return getQuestionById(item.id);\n          });\n\n          //get all metrics to questions\n          Promise.all(reqArray).then(function (res) {\n            setGQMConfigCards(GQMCardsToQuestions(res));\n          });\n        } else {\n          setGQMConfigCards(GQMCardsToQuestions([]));\n        }\n      }).catch(function () {\n        setGQMConfigCards(GQMCardsToQuestions([]));\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChooseProject, {\n    setProject: setProject,\n    project: project,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), project.projectID && /*#__PURE__*/React.createElement(ChooseComponent, {\n    setSQProject: setSQProject,\n    SQProject: SQProject,\n    projectID: project.projectID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), GQMConfigCards ? /*#__PURE__*/React.createElement(GQMWrapper, {\n    goal: goal,\n    questions: GQMConfigCards,\n    userRole: \"manager\",\n    users: users,\n    projectID: project.projectID,\n    SQProject: SQProject.projectID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"waiting\"));\n};\nexport default Dashboard;","map":{"version":3,"names":["React","useLayoutEffect","useState","useSelector","GQMWrapper","GQMCardsToQuestions","getGoal","getQuestionById","ChooseProject","ChooseComponent","Dashboard","_useState","_useState2","_slicedToArray","goal","setGoal","_useState3","isactive","undefined","projectID","name","_useState4","project","setProject","_useState5","_useState6","SQProject","setSQProject","users","state","toJS","email","JSON","parse","localStorage","getItem","_useState7","_useState8","GQMConfigCards","setGQMConfigCards","then","res","length","content","reqArray","questions","map","item","id","Promise","all","catch","createElement","Fragment","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","userRole"],"sources":["/Users/drenyasova/diplome/src/views/NewDashboard/index.js"],"sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n//GQM\nimport GQMWrapper from \"./GQM/GQMWrapper\";\nimport { GQMCardsToQuestions } from \"./GQMCardsConfig/index\";\nimport {\n  getGoal,\n  // getQuestions,\n  getQuestionById,\n} from \"../GQMConfig/GQM/GQMHelper\";\n\nimport { ChooseProject, ChooseComponent } from \"./DropDowns/index.js\";\n\nimport \"./Dashboard.scss\";\n\nconst Dashboard = () => {\n  const [goal, setGoal] = useState(\n    \"You did not set up the GQM model, so you will see the default settings\"\n  );\n  const [project, setProject] = useState({\n    isactive: undefined,\n    projectID: undefined,\n    name: undefined,\n  });\n  const [SQProject, setSQProject] = useState({\n    isactive: undefined,\n    projectID: undefined,\n    name: undefined,\n  });\n\n  const users = useSelector((state) => state.users).toJS().users;\n  const email = JSON.parse(localStorage.getItem(\"innometrics-email\"));\n  // const USER_TYPE = 'developer'\n\n  //get GQM questions and metrics for them\n  const [GQMConfigCards, setGQMConfigCards] = useState();\n  useLayoutEffect(() => {\n    if (email) {\n      getGoal(localStorage.getItem('mr-token'), localStorage.getItem('user_id'))\n        .then((res) => {\n          if (res && res.length !== 0) {\n            setGoal(res[0].content);\n            //create promises questionID X reqs\n            let reqArray = res[0].questions.map((item) => {\n              return getQuestionById(item.id);\n            });\n\n            //get all metrics to questions\n            Promise.all(reqArray).then((res) => {\n              setGQMConfigCards(GQMCardsToQuestions(res));\n            });\n          } else {\n            setGQMConfigCards(GQMCardsToQuestions([]));\n          }\n        })\n        .catch(() => {\n          setGQMConfigCards(GQMCardsToQuestions([]));\n        });\n    }\n  }, []);\n\n  return (\n    <>\n      <ChooseProject setProject={setProject} project={project} />\n      {project.projectID && (\n        <ChooseComponent\n          setSQProject={setSQProject}\n          SQProject={SQProject}\n          projectID={project.projectID}\n        />\n      )}\n      {GQMConfigCards ? (\n        <GQMWrapper\n          goal={goal}\n          questions={GQMConfigCards}\n          userRole={\"manager\"}\n          users={users}\n          projectID={project.projectID}\n          SQProject={SQProject.projectID}\n        />\n      ) : (\n        <p>waiting</p>\n      )}\n    </>\n  );\n};\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}